# Base image with libraries that are rarely changing, but slow to compile.

FROM ubuntu:20.04

ENV DEBIAN_FRONTEND=noninteractive

RUN apt update && \
    apt install --no-install-recommends -y \
    apt-transport-https \
    apt-utils \
    automake \
    ca-certificates \
    ccache \
    clang \
    cmake \
    curl \
    git \
    libc-ares-dev \
    libc-ares2 \
    libcurl4-openssl-dev \
    libre2-dev \
    libssl-dev \
    m4 \
    make \
    pkg-config \
    tar \
    wget \
    zlib1g-dev

# We're using a module provider build to avoid issues with the gRPC proto plugin.
# https://github.com/faaxm/exmpl-cmake-grpc/issues/1#issuecomment-873431482
RUN git clone --recurse-submodules -b v1.39.0-pre1 https://github.com/grpc/grpc && \
    # https://github.com/grpc/grpc/issues/25949#issuecomment-823427625
    cd /grpc/third_party/abseil-cpp && \
    cmake . && \
    make -j8 install && \
    cd /grpc && mkdir build && cd build && \
    cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_STANDARD=20 \
    -DgRPC_INSTALL=ON \
    -DgRPC_BUILD_TESTS=OFF \
    -DgRPC_CARES_PROVIDER=package \
    -DgRPC_RE2_PROVIDER=package \
    # Compiling SSL from the submodule will result in a weird BIO_write error at
    # runtime.
    -DgRPC_SSL_PROVIDER=package \
    -DgRPC_ZLIB_PROVIDER=package && \
    make -j8 install && \
    ldconfig

RUN mkdir -p /build/crc32c && cd /build/crc32c && \
    curl -sSL https://github.com/google/crc32c/archive/refs/tags/1.1.1.tar.gz | tar -xzf - --strip=1 && \
    mkdir build && cd build && \
    cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_STANDARD=20 \
    -DBUILD_SHARED_LIBS=yes \
    -DCRC32C_BUILD_TESTS=OFF \
    -DCRC32C_BUILD_BENCHMARKS=OFF \
    -DCRC32C_USE_GLOG=OFF && \
    make -j8 install && \
    ldconfig

RUN mkdir -p /build/json && cd /build/json && \
    curl -sSL https://github.com/nlohmann/json/archive/refs/tags/v3.9.1.tar.gz | tar -xzf - --strip=1 && \
    mkdir build && cd build && \
    cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_STANDARD=20 \
    -DBUILD_SHARED_LIBS=yes \
    -DBUILD_TESTING=OFF && \
    make -j8 install && \
    ldconfig

RUN mkdir -p /build/google-cloud-cpp && cd /build/google-cloud-cpp && \
    curl -sSL https://github.com/googleapis/google-cloud-cpp/archive/refs/tags/v1.29.0.tar.gz | tar -xzf - --strip=1 && \
    mkdir build && cd build && \
    cmake .. \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_STANDARD=20 \
    -DBUILD_TESTING=OFF \
    -DGOOGLE_CLOUD_CPP_ENABLE_EXAMPLES=OFF && \
    make -j8 install && \
    ldconfig

RUN mkdir -p /build/arrow && cd /build/arrow && \
    curl -sSL https://github.com/apache/arrow/archive/refs/tags/apache-arrow-4.0.1.tar.gz | tar -xzf - --strip=1 && \
    mkdir build && cd build && \
    cmake ../cpp \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_CXX_STANDARD=20 \
    -DARROW_PARQUET=ON \
    -DARROW_WITH_SNAPPY=ON && \
    make -j8 install && \
    ldconfig

# extract-elf-so tars .so files to create small Docker images.
RUN curl -sSL -o /build/extract-elf-so https://github.com/William-Yeh/extract-elf-so/releases/download/v0.6/extract-elf-so_static_linux-amd64 && \
    chmod +x /build/extract-elf-so